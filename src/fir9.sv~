module fir9( //setting inputs/outputs
	input logic clk, //setting clock as an input
	input logic rst, //setting reset as an input
	input logic [3:0]x, //setting x as an input
	input logic [10:0]thresh, //setting thresh as an input
	input logic [3:0] c [8:0], //setting c as an input
	output logic y //setting y as an output
); 

logic [3:0] x_reg [0:8]; //creating a register for x values
logic [3:0] c_reg [0:8]; //creating a register for c values
logic [7:0] m_reg [0:8]; //register to store the multiplication of x and c
logic y_reg; //register for output values
logic [10:0] thresh_reg; //register to take in threshold values
logic [10:0] sum_reg; //register to store the sum of the registers

//sequential logic block
always_ff@(posedge clk, posedge rst) begin

    //setting all registers to 0 if reset = 1
	if(rst)begin
        //for loop to set all x and c registers to 0
		for (int tap = 0; tap < 9; tap++) begin
			x_reg[tap] <= 0;
			c_reg[tap] <= 0;
			m_reg[tap] <= 0;
		end
		thresh_reg <= 0;
		y<=0;
	end
       	
	else begin

        //sets first value of x_reg and c_reg to x and c
        //(as for loop sets array element to the array element before
        //it and there is no array element before 0
		x_reg[0] <= x;
		c_reg[0] <= c[0];
        //calculation of m_reg for value of tap = 0
		m_reg[0] <= x_reg[0]*c_reg[0];

        //sets value of each register to the one before it and calculates the
        //appropriate value of m_reg
		for (int tap = 1; tap < 9; tap++) begin
			x_reg[tap] <= x_reg[tap-1];
			c_reg[tap] <= c[tap];
			m_reg[tap] <= x_reg[tap]*c_reg[tap];
		end
        
        //sets thresh_reg and y to the appropriate values
		thresh_reg <= thresh;
		y <= y_reg;

	end
end

//combinational logic block
always_comb begin

    //sets sum_reg to 0 before doing the sum to remove the value of sum_reg
    //from the last x value
	sum_reg = 0;

    //adds each value of m_reg to sum_reg
	for (int tap =0; tap < 9; tap++) begin
		sum_reg = sum_reg + m_reg[tap];
	end


    //compares the value of sum_reg to the value of thresh_reg
    //and if greater outputs one and if less ouputs 0
	if (sum_reg < thresh_reg) 
		y_reg = 0;
	else 
		y_reg = 1;
	
end
		
endmodule
